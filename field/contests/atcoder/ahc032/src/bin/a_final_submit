#![allow(dead_code,unused_imports,unused_variables,non_snake_case, non_upper_case_globals, path_statements)]
use proconio::{fastout, input,marker::{Chars, Bytes, Isize1, Usize1}};
use std::{
    cmp::{max, min, Reverse},
    collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, VecDeque},
    mem::swap,
    process::exit,
    time::Instant
};
use itertools::Itertools;
use superslice::Ext;
use rustc_hash::FxHashMap;

const TIME_LIMIT: f64 = 1.6;
const INF: usize = usize::MAX;
const MOD: i64 = 998244353;

#[derive(Clone)]
struct Solver {
    n: usize,
    m: usize,
    k: usize,
    a: Vec<Vec<i64>>,
    stamps: Vec<Vec<Vec<i64>>>,
    start_time: Instant,
    current_time: Instant,
    best_score: i64,
    ans: Vec<(usize, usize, usize)>,
}

impl Solver {
    fn new(n: usize, m: usize, k: usize, a: Vec<Vec<i64>>, stamps: Vec<Vec<Vec<i64>>>) -> Self {
        Solver {
            n,
            m,
            k,
            a,
            stamps,
            start_time: Instant::now(),
            current_time: Instant::now(),
            best_score: 0,
            ans: Vec::new(),
        }
    }

    fn solve(&mut self) {
        self.best_score = self.calc_score(&self.a);
        // K回ループ
        for _ in 0..self.k {
            self.current_time = Instant::now();
            if self.current_time.duration_since(self.start_time).as_secs_f64() >= TIME_LIMIT {
                break;
            }
            if self.ans.len() >= self.k {
                break;
            }

            if self.ans.len() == 80 {
                let (m, p, q) = self.greedy_choice();
                if m != usize::MAX {
                    self.ans.push((m, p, q));
                    for dy in 0..3 {
                        for dx in 0..3 {
                            self.a[p + dy][q + dx] = (self.a[p + dy][q + dx] + self.stamps[m][dy][dx]) % MOD;
                        }
                    }
                }
                break;
            }
            let (m, p, q, m2, p2, q2, m3, p3, q3, m4, p4, q4, m5, p5, q5) = self.greedy_choice2();
            if m != usize::MAX && m2 != usize::MAX && m3 != usize::MAX && m4 != usize::MAX && m5 != usize::MAX && self.ans.len() + 5 < self.k {
                self.ans.push((m, p, q));
                for dy in 0..3 {
                    for dx in 0..3 {
                        self.a[p + dy][q + dx] = (self.a[p + dy][q + dx] + self.stamps[m][dy][dx]) % MOD;
                    }
                }
                self.ans.push((m2, p2, q2));
                for dy in 0..3 {
                    for dx in 0..3 {
                        self.a[p2 + dy][q2 + dx] = (self.a[p2 + dy][q2 + dx] + self.stamps[m2][dy][dx]) % MOD;
                    }
                }
                self.ans.push((m3, p3, q3));
                for dy in 0..3 {
                    for dx in 0..3 {
                        self.a[p3 + dy][q3 + dx] = (self.a[p3 + dy][q3 + dx] + self.stamps[m3][dy][dx]) % MOD;
                    }
                }
                self.ans.push((m4, p4, q4));
                for dy in 0..3 {
                    for dx in 0..3 {
                        self.a[p4 + dy][q4 + dx] = (self.a[p4 + dy][q4 + dx] + self.stamps[m4][dy][dx]) % MOD;
                    }
                }
                self.ans.push((m5, p5, q5));
                for dy in 0..3 {
                    for dx in 0..3 {
                        self.a[p5 + dy][q5 + dx] = (self.a[p5 + dy][q5 + dx] + self.stamps[m5][dy][dx]) % MOD;
                    }
                }
            } else {
                break;
            }
            self.best_score = self.calc_score(&self.a);
        }

        println!("{}", self.ans.len());
        for &(m, p, q) in &self.ans {
            println!("{} {} {}", m, p, q);
        }

        eprintln!("{}", self.ans.len());
        eprintln!("Score = {}", self.calc_score(&self.a));
    }


    fn greedy_choice(&mut self) -> (usize, usize, usize) {

        let mut best_score = self.calc_score(&self.a);
        let mut best_m = INF;
        let mut best_y = INF;
        let mut best_x = INF;

        for m in 0..self.m {
            for y in 0..self.n - 2 {
                for x in 0..self.n - 2 {
                    let mut a = self.a.clone();
                    for dy in 0..3 {
                        for dx in 0..3 {
                            a[y + dy][x + dx] = (a[y + dy][x + dx] + self.stamps[m][dy][dx]) % MOD;
                        }
                    }
                    let score = self.calc_score(&a);
                    if score > best_score {
                        best_score = score;
                        best_m = m;
                        best_y = y;
                        best_x = x;
                    }
                }
            }
        }
        (best_m, best_y, best_x)
    }

    fn greedy_choice2(&mut self) -> (usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize) {
        self.current_time = Instant::now();
        if self.current_time.duration_since(self.start_time).as_secs_f64() >= TIME_LIMIT {
            return (INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF);
        }

        let mut best_score = self.calc_score(&self.a);
        let mut best_m = INF;
        let mut best_y = INF;
        let mut best_x = INF;

        let mut best_m2 = INF;
        let mut best_y2 = INF;
        let mut best_x2 = INF;

        let mut best_m3 = INF;
        let mut best_y3 = INF;
        let mut best_x3 = INF;

        let mut best_m4 = INF;
        let mut best_y4 = INF;
        let mut best_x4 = INF;

        let mut best_m5 = INF;
        let mut best_y5 = INF;
        let mut best_x5 = INF;

        let mut cand_a = BinaryHeap::new();
        for m in 0..self.m {
            for y in 0..self.n - 2 {
                for x in 0..self.n - 2 {
                    let mut a = self.a.clone();
                    for dy in 0..3 {
                        for dx in 0..3 {
                            a[y + dy][x + dx] = (a[y + dy][x + dx] + self.stamps[m][dy][dx]) % MOD;
                        }
                    }
                    let score = self.calc_score(&a);
                    cand_a.push((score, m, y, x, a));
                }
            }
        }

        self.current_time = Instant::now();
        if self.current_time.duration_since(self.start_time).as_secs_f64() >= TIME_LIMIT {
            return (INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF);
        }

        let mut cand_b = BinaryHeap::new();
        for _ in 0..50 {
            if let Some((score, m, y, x, a)) = cand_a.pop() {
                for m2 in 0..self.m {
                    for y2 in 0..self.n - 2 {
                        for x2 in 0..self.n - 2 {
                            let mut b = a.clone();
                            for dy in 0..3 {
                                for dx in 0..3 {
                                    b[y2 + dy][x2 + dx] = (b[y2 + dy][x2 + dx] + self.stamps[m2][dy][dx]) % MOD;
                                }
                            }
                            let score = self.calc_score(&b);
                            cand_b.push((score, m, m2, y, x, y2, x2, b));
                        }
                    }
                }
            }
        }

        self.current_time = Instant::now();
        if self.current_time.duration_since(self.start_time).as_secs_f64() >= TIME_LIMIT {
            return (INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF);
        }

        let mut cand_c = BinaryHeap::new();
        for _ in 0..50 {
            if let Some((score, m, m2, y, x, y2, x2, b)) = cand_b.pop() {
                for m3 in 0..self.m {
                    for y3 in 0..self.n - 2 {
                        for x3 in 0..self.n - 2 {
                            let mut c = b.clone();
                            for dy in 0..3 {
                                for dx in 0..3 {
                                    c[y3 + dy][x3 + dx] = (c[y3 + dy][x3 + dx] + self.stamps[m3][dy][dx]) % MOD;
                                }
                            }
                            let score = self.calc_score(&c);
                            cand_c.push((score, m, m2, m3, y, x, y2, x2, y3, x3, c));
                        }
                    }
                }
            }
        }

        self.current_time = Instant::now();
        if self.current_time.duration_since(self.start_time).as_secs_f64() >= TIME_LIMIT {
            return (INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF);
        }

        let mut cand_d = BinaryHeap::new();
        for _ in 0..50 {
            if let Some((score, m, m2, m3, y, x, y2, x2, y3, x3, c)) = cand_c.pop() {
                for m4 in 0..self.m {
                    for y4 in 0..self.n - 2 {
                        for x4 in 0..self.n - 2 {
                            let mut d = c.clone();
                            for dy in 0..3 {
                                for dx in 0..3 {
                                    d[y4 + dy][x4 + dx] = (d[y4 + dy][x4 + dx] + self.stamps[m4][dy][dx]) % MOD;
                                }
                            }
                            let score = self.calc_score(&d);
                            let tuple_mpq = (m, m2, m3, m4, y, x, y2, x2, y3, x3, y4, x4);
                            cand_d.push((score, tuple_mpq, d));
                        }
                    }
                }
            }
        }

        self.current_time = Instant::now();
        if self.current_time.duration_since(self.start_time).as_secs_f64() >= TIME_LIMIT {
            return (INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF);
        }

        for _ in 0..50 {
            if let Some((score, tuple_mpq, d)) = cand_d.pop() {
                let (m, m2, m3, m4, y, x, y2, x2, y3, x3, y4, x4) = tuple_mpq;
                for m5 in 0..self.m {
                    for y5 in 0..self.n - 2 {
                        for x5 in 0..self.n - 2 {
                            let mut e = d.clone();
                            for dy in 0..3 {
                                for dx in 0..3 {
                                    e[y5 + dy][x5 + dx] = (e[y5 + dy][x5 + dx] + self.stamps[m5][dy][dx]) % MOD;
                                }
                            }
                            let score = self.calc_score(&e);
                            if score > best_score {
                                best_score = score;
                                best_m = m;
                                best_y = y;
                                best_x = x;
                                best_m2 = m2;
                                best_y2 = y2;
                                best_x2 = x2;
                                best_m3 = m3;
                                best_y3 = y3;
                                best_x3 = x3;
                                best_m4 = m4;
                                best_y4 = y4;
                                best_x4 = x4;
                                best_m5 = m5;
                                best_y5 = y5;
                                best_x5 = x5;
                            }
                        }
                    }
                }
            }
        }

        (best_m, best_y, best_x, best_m2, best_y2, best_x2, best_m3, best_y3, best_x3, best_m4, best_y4, best_x4, best_m5, best_y5, best_x5)
    }

    fn calc_score(&self, a: &[Vec<i64>]) -> i64 {
        let mut score = 0;
        for y in 0..self.n {
            for x in 0..self.n {
                score += a[y][x] % MOD;
            }
        }
        score
    }
}

fn main() {
    input! {
        n: usize, m: usize, k: usize,
        a: [[i64; n]; n],
        stamps: [[[i64; 3]; 3]; m]
    }

    let mut solver = Solver::new(n, m, k, a, stamps);
    solver.solve();
}
